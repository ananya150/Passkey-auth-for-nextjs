'use client';
import Image from 'next/image'
import { useState } from 'react';

interface UserAccount {
  userId: string;
  username: string;
  displayName: string;
  challengeBuffer: string;
  challenge: string;
}

interface PassKeyClientDataValidation {
  valid: boolean;
  challenge: string | null;
}

interface PassKeyClientData {
  type: string;
  challenge: string;
  origin: string;
  crossOrigin: boolean;
}

const generateRandomString = (lengthOfString: number) => {
  var p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  return [...Array(lengthOfString)].reduce(
    (a) => a + p[~~(Math.random() * p.length)],
    ""
  ) as string;
};

const CreatePassKeyCredential = async (
  username: string,
  displayName: string,
  challengeBufferString: string,
  userId: string
) => {
  /*
    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. 
    This is generated on the server using a cryptographically secure random number generator. 
    By generating the challenge on the server we can prevent "replay attacks". 
    The authenticator will sign this along with other data.
  */
  const challengeBuffer = Uint8Array.from(
    challengeBufferString as string,
    (c) => c.charCodeAt(0)
  );

  const userIdBuffer = Uint8Array.from(userId, (c) => c.charCodeAt(0));

  const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions =
    {
      challenge: challengeBuffer,
      rp: {
        name: 'localhost',
        id: 'localhost',
      },
      user: {
        id: userIdBuffer,
        name: username,
        displayName: displayName,
      },
      // SUPPORT ALL PASSKEYS
      pubKeyCredParams: [
        {
          type: "public-key",
          alg: -7,
        },
        {
          type: "public-key",
          alg: -35,
        },
        {
          type: "public-key",
          alg: -36,
        },
        {
          type: "public-key",
          alg: -257,
        },
        {
          type: "public-key",
          alg: -258,
        },
        {
          type: "public-key",
          alg: -259,
        },
        {
          type: "public-key",
          alg: -37,
        },
        {
          type: "public-key",
          alg: -38,
        },
        {
          type: "public-key",
          alg: -39,
        },
        {
          type: "public-key",
          alg: -8,
        },
      ],
      timeout: 15000,
      attestation: "direct",
    };

  console.log(
    "✅  publicKeyCredentialCreationOptions : ",
    publicKeyCredentialCreationOptions
  );

  const pubKey =  await navigator.credentials.create({
    publicKey: publicKeyCredentialCreationOptions,
  });
  console.log("Public Key is ", pubKey);
  return pubKey;
};


const validatePassKeyCreation = (credential: Credential): string | null => {
  const clientDataValidation = validateClientData(credential);
  switch (clientDataValidation.valid) {
    case true:
      return clientDataValidation.challenge;
    case false:
      return null;
  }
};

const validateClientData = (
  credential: Credential
): PassKeyClientDataValidation => {
  // @ts-ignore
  // Gather the Client Data
  const clientData = parseClientData(credential.response.clientDataJSON);
  console.log("✅  Gathered Client Data: ", clientData);
  if (clientData.origin !== 'http://localhost:3000') {
    console.log("❌  Origin does not match!");
    return {
      valid: false,
      challenge: null,
    };
  } else if (clientData.type !== "webauthn.create") {
    console.log("❌  Type does not match webauthn.create");
    return {
      valid: false,
      challenge: null,
    };
  }
  console.log("✅  Client Data is Valid");
  return {
    valid: true,
    challenge: clientData.challenge,
  };
};

const parseClientData = (clientData: ArrayBuffer) => {
  // decode the clientDataJSON into a utf-8 string
  const utf8Decoder = new TextDecoder("utf-8");
  const decodedClientData = utf8Decoder.decode(clientData);

  // parse the string as an object
  const clientDataObj = JSON.parse(decodedClientData);
  return clientDataObj as PassKeyClientData;
};


export default function Home() {

  const [username, setUsername] = useState<string>("Ananya");
  const [displayName, setDisplayName] = useState<string>("Anan");

  const createPassKey = async () => {
    const userId = generateRandomString(16);
    console.log("✅  Created userId : ", userId);
    const challengeBufferString = generateRandomString(32);
    console.log("✅ Created challengeBufferString : ", challengeBufferString);
    try {
      const credential = await CreatePassKeyCredential(
        username.toLowerCase(),
        displayName.toLowerCase(),
        challengeBufferString,
        userId
      );

      console.log("✅ Created Pass Key Credential ! ");

      if (credential) {
        console.log("✅ Credential is not null : ", credential);
        // Validate PassKey Creation
        const challenge = validatePassKeyCreation(credential);
        switch (challenge) {
          case null:
            console.log("❌ PassKey verification failed.");
            return;
          default:
            console.log(
              "✅ PassKey verification passed with challenge : ",
              challenge
            );
            // onRegister();
            break;
        }
      } else {
        console.log("❌ Credential does not exist.");
      }
    } catch (error) {
      console.log("❌ Error creating credential");
      // Session Timed Out
      console.log("ERROR : ", error);
    }
  };


function str2ab(str: string) {
    var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
    var bufView = new Uint16Array(buf);
    for (var i=0, strLen=str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);
    }
    return buf;
}

  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">src/app/page.tsx</code>
        </p>
        <div className="fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none">
          <a
            className="pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0"
            href="https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            By{' '}
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              className="dark:invert"
              width={100}
              height={24}
              priority
            />
          </a>
        </div>
      </div>

      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px]">
        <Image
          className="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert"
          src="/next.svg"
          alt="Next.js Logo"
          width={180}
          height={37}
          priority
        />
      </div>
      <button onClick={createPassKey} >Create</button>
      <div className="mb-32 grid text-center lg:mb-0 lg:grid-cols-4 lg:text-left">
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Docs{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Find in-depth information about Next.js features and API.
          </p>
        </a>

        <a
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800 hover:dark:bg-opacity-30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Learn{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Learn about Next.js in an interactive course with&nbsp;quizzes!
          </p>
        </a>

        <a
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Templates{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Explore the Next.js 13 playground.
          </p>
        </a>

        <a
          href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Deploy{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Instantly deploy your Next.js site to a shareable URL with Vercel.
          </p>
        </a>
      </div>
    </main>
  )
}
